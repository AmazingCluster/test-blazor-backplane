@page "/"
@using Microsoft.AspNetCore.Components.Web
@namespace BlazorSignalRBackplaneTest.Pages
@addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers

@{
    HttpContext.Response.Headers["Cache-Control"] = "no-store";
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta http-equiv="Cache-Control" content="no-store" />
    <base href="~/" />
    <link rel="stylesheet" href="css/bootstrap/bootstrap.min.css" />
    <link href="css/site.css" rel="stylesheet" />
    <link href="BlazorSignalRBackplaneTest.styles.css" rel="stylesheet" />
    <link rel="icon" type="image/png" href="favicon.png" />
    <component type="typeof(HeadOutlet)" render-mode="Server" />
</head>
<body>
    <component type="typeof(App)" render-mode="Server" />

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">🗙</a>
    </div>

    @* Autostart is false as we start Blazor ourselves with custom settings *@
    <script src="_framework/blazor.server.js" autostart="false"></script>
    <script>
        @* The below settings are required as we do not want to use sticky sessions for our SignalR connection. This sets the transports to use to 'WebSockets' only (disabling Long polling & server-side events) and skips negotitation, which isn't necessary for WSS connections anyway.' *@
        Blazor.start({
            configureSignalR: (builder) => {
                builder.withUrl("/_blazor", {
                    skipNegotiation: true,
                    transport: 1 @* Websockets *@
                });
            },
            reconnectionHandler: {
                onConnectionDown: (options, error) => {
                    console.Log(options);
                    console.log(error);
                }
            }
        });
    </script>
</body>
</html>
